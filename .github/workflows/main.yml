name: main
on:
  pull_request:
  push:
    branches:
    - master
    tags:
    - v*
env:
  AGE_VERSION: 1.0.0
  GO_VERSION: 1.17.1
  GOLANGCI_LINT_VERSION: 1.42.1
jobs:
  test-archlinux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Test
      run: |
        ( cd assets/docker && ./test.sh archlinux )
  test-debian-i386:
    runs-on: macos-latest
    env:
      VAGRANT_BOX: debian11-i386
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Vagrant Boxes
      uses: actions/cache@v2
      with:
        path: ~/.vagrant.d
        key: ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-${{ hashFiles('assets/vagrant/*.Vagrantfile') }}
        restore-keys: |
          ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-
    - name: Test
      run: |
        ( cd assets/vagrant && ./test.sh debian11-i386 )
  test-fedora:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Test
      run: |
        ( cd assets/docker && ./test.sh fedora )
  test-freebsd:
    runs-on: macos-latest
    env:
      VAGRANT_BOX: freebsd13
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Vagrant Boxes
      uses: actions/cache@v2
      with:
        path: ~/.vagrant.d
        key: ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-${{ hashFiles('assets/vagrant/*.Vagrantfile') }}
        restore-keys: |
          ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-
    - name: Test
      run: |
        ( cd assets/vagrant && ./test.sh freebsd13 )
  test-macos:
    runs-on: macos-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Build
      run: |
        go build ./...
    - name: Run
      run: |
        go run . --version
    - name: Install age
      run: |
        cd $(mktemp -d)
        curl -fsSL https://dl.filippo.io/age/v${AGE_VERSION}?for=darwin/amd64 | tar xzf -
        sudo install -m 755 age/age /usr/local/bin
        sudo install -m 755 age/age-keygen /usr/local/bin
    - name: Test
      run: go test -race ./...
  test-openbsd:
    runs-on: macos-latest
    env:
      VAGRANT_BOX: openbsd6
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Vagrant Boxes
      uses: actions/cache@v2
      with:
        path: ~/.vagrant.d
        key: ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-${{ hashFiles('assets/vagrant/*.Vagrantfile') }}
        restore-keys: |
          ${{ runner.os }}-vagrant-${{ env.VAGRANT_BOX }}-
    - name: Test
      run: |
        ( cd assets/vagrant && ./test.sh openbsd6 )
  test-ubuntu:
    runs-on: ubuntu-18.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Build
      run: |
        go build ./...
    - name: Run
      run: |
        go run . --version
    - name: Install age
      run: |
        cd $(mktemp -d)
        curl -fsSL https://dl.filippo.io/age/v${AGE_VERSION}?for=linux/amd64 | tar xzf -
        sudo install -m 755 age/age /usr/local/bin
        sudo install -m 755 age/age-keygen /usr/local/bin
    - name: Test (umask 022)
      run: go test -ldflags="-X github.com/twpayne/chezmoi/internal/chezmoitest.umaskStr=0o022" -race ./...
    - name: Test (umask 002)
      run: go test -ldflags="-X github.com/twpayne/chezmoi/internal/chezmoitest.umaskStr=0o002" -race ./...
    - name: Install release dependencies
      run: |
        sudo apt-get update
        sudo apt-get -yq --no-install-suggests --no-install-recommends install musl-tools snapcraft
    - name: Build release
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --skip-publish --snapshot
    - name: Test release
      run: |
        # verify that version information is embedded correctly
        file ./dist/chezmoi-cgo-glibc_linux_amd64/chezmoi | tee /dev/stderr | grep -q "dynamically linked"
        file ./dist/chezmoi-cgo-musl_linux_amd64/chezmoi | tee /dev/stderr | grep -q "statically linked"
        ./dist/chezmoi-cgo-glibc_linux_amd64/chezmoi --version | tee /dev/stderr | grep -q "chezmoi version v2"
        ./dist/chezmoi-cgo-musl_linux_amd64/chezmoi --version | tee /dev/stderr | grep -q "chezmoi version v2"
        ./dist/chezmoi-nocgo_linux_386/chezmoi --version | tee /dev/stderr | grep -q "chezmoi version v2"
    - name: Upload artifact chezmoi-linux-amd64
      uses: actions/upload-artifact@v2
      with:
        name: chezmoi-linux-amd64
        path: dist/chezmoi-cgo-glibc_linux_amd64/chezmoi
    - name: Upload artifact chezmoi-linux-musl-amd64
      uses: actions/upload-artifact@v2
      with:
        name: chezmoi-linux-musl-amd64
        path: dist/chezmoi-cgo-musl_linux_amd64/chezmoi
    - name: Upload artifact chezmoi-darwin-amd64
      uses: actions/upload-artifact@v2
      with:
        name: chezmoi-darwin-amd64
        path: dist/chezmoi-nocgo_darwin_amd64/chezmoi
    - name: Upload artifact chezmoi-darwin-arm64
      uses: actions/upload-artifact@v2
      with:
        name: chezmoi-darwin-arm64
        path: dist/chezmoi-nocgo_darwin_arm64/chezmoi
    - name: Upload artifact chezmoi-windows-amd64.exe
      uses: actions/upload-artifact@v2
      with:
        name: chezmoi-windows-amd64.exe
        path: dist/chezmoi-nocgo_windows_amd64/chezmoi.exe
  test-windows:
    runs-on: windows-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Build
      run: |
        go build ./...
    - name: Run
      run: |
        go run . --version
    - name: Install age
      run: |
        $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\ProgramData\chocolatey\bin"
        [Environment]::SetEnvironmentVariable("Path", $env:PATH, "Machine")
        choco install --no-progress --yes age.portable
    - name: Install gpg4win
      run: |
        $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\ProgramData\chocolatey\bin"
        [Environment]::SetEnvironmentVariable("Path", $env:PATH, "Machine")
        choco install --no-progress --yes gpg4win
        echo "C:\Program Files (x86)\GnuPG\bin" >> $env:GITHUB_PATH
    - name: Upload chocolatey log
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: chocolatey.log
        path: C:/ProgramData/chocolatey/logs/chocolatey.log
    - name: Test
      run: go test -race ./...
  test-voidlinux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Test
      run: |
        ( cd assets/docker && ./test.sh voidlinux )
  generate:
    runs-on: ubuntu-18.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Generate
      run: |
        go generate
        git diff --exit-code
  lint:
    runs-on: ubuntu-18.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v${{ env.GOLANGCI_LINT_VERSION }}
    - name: ShellCheck
      uses: ludeeus/action-shellcheck@1.1.0
      with:
        ignore: completions
    - name: Whitespace
      run: go run ./internal/cmds/lint-whitespace
    - name: Typos
      run: |
        go install github.com/twpayne/findtypos@latest
        findtypos chezmoi .
  release: # FIXME this should be merged into test-ubuntu above
    if: startsWith(github.ref, 'refs/tags/')
    needs:
    - generate
    - lint
    - test-debian-i386
    - test-fedora
    - test-freebsd
    - test-macos
    - test-openbsd
    - test-ubuntu
    - test-windows
    runs-on: ubuntu-18.04
    steps:
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get -yq --no-install-suggests --no-install-recommends install musl-tools snapcraft
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Snapcraft login
      env:
        SNAPCRAFT_LOGIN: ${{ secrets.SNAPCRAFT_LOGIN }}
      run: |
        snapcraft login --with <(echo "$SNAPCRAFT_LOGIN" | base64 -d)
    - name: Release
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release
      env:
        GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
    # The following is needed because chezmoi upgrade and
    # assets/scripts/install.sh have inconsistently looked for
    # chezmoi_${VERSION}_checksums.txt and checksums.txt. To ensure
    # compatibility with all versions, upload checksums.txt as well.
    - name: Upload checksums.txt
      run: |
        VERSION=${GITHUB_REF##*/v}
        cp dist/chezmoi_${VERSION}_checksums.txt dist/checksums.txt
        gh release upload v${VERSION} dist/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
